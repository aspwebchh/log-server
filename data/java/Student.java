/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2020-09-18")
public class Student implements org.apache.thrift.TBase<Student, Student._Fields>, java.io.Serializable, Cloneable, Comparable<Student> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Student");

  private static final org.apache.thrift.protocol.TField SNO_FIELD_DESC = new org.apache.thrift.protocol.TField("sno", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SSEX_FIELD_DESC = new org.apache.thrift.protocol.TField("ssex", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField SAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("sage", org.apache.thrift.protocol.TType.I16, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StudentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StudentTupleSchemeFactory();

  public int sno; // required
  public java.lang.String sname; // required
  public boolean ssex; // required
  public short sage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SNO((short)1, "sno"),
    SNAME((short)2, "sname"),
    SSEX((short)3, "ssex"),
    SAGE((short)4, "sage");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SNO
          return SNO;
        case 2: // SNAME
          return SNAME;
        case 3: // SSEX
          return SSEX;
        case 4: // SAGE
          return SAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SNO_ISSET_ID = 0;
  private static final int __SSEX_ISSET_ID = 1;
  private static final int __SAGE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SNO, new org.apache.thrift.meta_data.FieldMetaData("sno", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SNAME, new org.apache.thrift.meta_data.FieldMetaData("sname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SSEX, new org.apache.thrift.meta_data.FieldMetaData("ssex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SAGE, new org.apache.thrift.meta_data.FieldMetaData("sage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Student.class, metaDataMap);
  }

  public Student() {
  }

  public Student(
    int sno,
    java.lang.String sname,
    boolean ssex,
    short sage)
  {
    this();
    this.sno = sno;
    setSnoIsSet(true);
    this.sname = sname;
    this.ssex = ssex;
    setSsexIsSet(true);
    this.sage = sage;
    setSageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Student(Student other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sno = other.sno;
    if (other.isSetSname()) {
      this.sname = other.sname;
    }
    this.ssex = other.ssex;
    this.sage = other.sage;
  }

  public Student deepCopy() {
    return new Student(this);
  }

  @Override
  public void clear() {
    setSnoIsSet(false);
    this.sno = 0;
    this.sname = null;
    setSsexIsSet(false);
    this.ssex = false;
    setSageIsSet(false);
    this.sage = 0;
  }

  public int getSno() {
    return this.sno;
  }

  public Student setSno(int sno) {
    this.sno = sno;
    setSnoIsSet(true);
    return this;
  }

  public void unsetSno() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SNO_ISSET_ID);
  }

  /** Returns true if field sno is set (has been assigned a value) and false otherwise */
  public boolean isSetSno() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SNO_ISSET_ID);
  }

  public void setSnoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SNO_ISSET_ID, value);
  }

  public java.lang.String getSname() {
    return this.sname;
  }

  public Student setSname(java.lang.String sname) {
    this.sname = sname;
    return this;
  }

  public void unsetSname() {
    this.sname = null;
  }

  /** Returns true if field sname is set (has been assigned a value) and false otherwise */
  public boolean isSetSname() {
    return this.sname != null;
  }

  public void setSnameIsSet(boolean value) {
    if (!value) {
      this.sname = null;
    }
  }

  public boolean isSsex() {
    return this.ssex;
  }

  public Student setSsex(boolean ssex) {
    this.ssex = ssex;
    setSsexIsSet(true);
    return this;
  }

  public void unsetSsex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SSEX_ISSET_ID);
  }

  /** Returns true if field ssex is set (has been assigned a value) and false otherwise */
  public boolean isSetSsex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SSEX_ISSET_ID);
  }

  public void setSsexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SSEX_ISSET_ID, value);
  }

  public short getSage() {
    return this.sage;
  }

  public Student setSage(short sage) {
    this.sage = sage;
    setSageIsSet(true);
    return this;
  }

  public void unsetSage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAGE_ISSET_ID);
  }

  /** Returns true if field sage is set (has been assigned a value) and false otherwise */
  public boolean isSetSage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAGE_ISSET_ID);
  }

  public void setSageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SNO:
      if (value == null) {
        unsetSno();
      } else {
        setSno((java.lang.Integer)value);
      }
      break;

    case SNAME:
      if (value == null) {
        unsetSname();
      } else {
        setSname((java.lang.String)value);
      }
      break;

    case SSEX:
      if (value == null) {
        unsetSsex();
      } else {
        setSsex((java.lang.Boolean)value);
      }
      break;

    case SAGE:
      if (value == null) {
        unsetSage();
      } else {
        setSage((java.lang.Short)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SNO:
      return getSno();

    case SNAME:
      return getSname();

    case SSEX:
      return isSsex();

    case SAGE:
      return getSage();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SNO:
      return isSetSno();
    case SNAME:
      return isSetSname();
    case SSEX:
      return isSetSsex();
    case SAGE:
      return isSetSage();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Student)
      return this.equals((Student)that);
    return false;
  }

  public boolean equals(Student that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sno = true;
    boolean that_present_sno = true;
    if (this_present_sno || that_present_sno) {
      if (!(this_present_sno && that_present_sno))
        return false;
      if (this.sno != that.sno)
        return false;
    }

    boolean this_present_sname = true && this.isSetSname();
    boolean that_present_sname = true && that.isSetSname();
    if (this_present_sname || that_present_sname) {
      if (!(this_present_sname && that_present_sname))
        return false;
      if (!this.sname.equals(that.sname))
        return false;
    }

    boolean this_present_ssex = true;
    boolean that_present_ssex = true;
    if (this_present_ssex || that_present_ssex) {
      if (!(this_present_ssex && that_present_ssex))
        return false;
      if (this.ssex != that.ssex)
        return false;
    }

    boolean this_present_sage = true;
    boolean that_present_sage = true;
    if (this_present_sage || that_present_sage) {
      if (!(this_present_sage && that_present_sage))
        return false;
      if (this.sage != that.sage)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + sno;

    hashCode = hashCode * 8191 + ((isSetSname()) ? 131071 : 524287);
    if (isSetSname())
      hashCode = hashCode * 8191 + sname.hashCode();

    hashCode = hashCode * 8191 + ((ssex) ? 131071 : 524287);

    hashCode = hashCode * 8191 + sage;

    return hashCode;
  }

  @Override
  public int compareTo(Student other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSno()).compareTo(other.isSetSno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sno, other.sno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSname()).compareTo(other.isSetSname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sname, other.sname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSsex()).compareTo(other.isSetSsex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSsex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ssex, other.ssex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSage()).compareTo(other.isSetSage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sage, other.sage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Student(");
    boolean first = true;

    sb.append("sno:");
    sb.append(this.sno);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sname:");
    if (this.sname == null) {
      sb.append("null");
    } else {
      sb.append(this.sname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ssex:");
    sb.append(this.ssex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sage:");
    sb.append(this.sage);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StudentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StudentStandardScheme getScheme() {
      return new StudentStandardScheme();
    }
  }

  private static class StudentStandardScheme extends org.apache.thrift.scheme.StandardScheme<Student> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Student struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SNO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sno = iprot.readI32();
              struct.setSnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sname = iprot.readString();
              struct.setSnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SSEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ssex = iprot.readBool();
              struct.setSsexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sage = iprot.readI16();
              struct.setSageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Student struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SNO_FIELD_DESC);
      oprot.writeI32(struct.sno);
      oprot.writeFieldEnd();
      if (struct.sname != null) {
        oprot.writeFieldBegin(SNAME_FIELD_DESC);
        oprot.writeString(struct.sname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SSEX_FIELD_DESC);
      oprot.writeBool(struct.ssex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SAGE_FIELD_DESC);
      oprot.writeI16(struct.sage);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StudentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StudentTupleScheme getScheme() {
      return new StudentTupleScheme();
    }
  }

  private static class StudentTupleScheme extends org.apache.thrift.scheme.TupleScheme<Student> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Student struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSno()) {
        optionals.set(0);
      }
      if (struct.isSetSname()) {
        optionals.set(1);
      }
      if (struct.isSetSsex()) {
        optionals.set(2);
      }
      if (struct.isSetSage()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSno()) {
        oprot.writeI32(struct.sno);
      }
      if (struct.isSetSname()) {
        oprot.writeString(struct.sname);
      }
      if (struct.isSetSsex()) {
        oprot.writeBool(struct.ssex);
      }
      if (struct.isSetSage()) {
        oprot.writeI16(struct.sage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Student struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sno = iprot.readI32();
        struct.setSnoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sname = iprot.readString();
        struct.setSnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ssex = iprot.readBool();
        struct.setSsexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sage = iprot.readI16();
        struct.setSageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

